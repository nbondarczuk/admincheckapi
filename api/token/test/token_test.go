package token_test

import (
	"fmt"
	"os"
	"strings"
	"testing"

	"admincheckapi/api/token"
	"admincheckapi/api/token/jwk"
	"admincheckapi/test/testconfig"

	"github.com/stretchr/testify/assert"
)

type jwtParcingTest struct {
	testDesc    string
	tokenStr    string
	expectedErr string
	gropuCount  int
}

var jwtParcingTests = []jwtParcingTest{

	//various test cases with diffent tokens and expected errors:
	jwtParcingTest{
		"POS: sig valid, not expired, 1 group - FRESH TOEKN EXPECTED!",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIyNWNmYWRkYS0zNDIxLTQwNzUtOTZiNC05ZGRmNTE3Y2Q4N2EiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExL3YyLjAiLCJpYXQiOjE2NjcxMzE1NjUsIm5iZiI6MTY2NzEzMTU2NSwiZXhwIjoxNjY3MTM1NDY1LCJhaW8iOiJFMlpnWU9EM2xuNnBzSFJkdnB6U0xOZnl6K3YzQVFBPSIsImF6cCI6IjI1Y2ZhZGRhLTM0MjEtNDA3NS05NmI0LTlkZGY1MTdjZDg3YSIsImF6cGFjciI6IjEiLCJncm91cHMiOlsiYzcxMTNhMzYtZGU0ZC00ZmNjLTllYTAtNTIzNzI3MTBkM2NkIl0sIm9pZCI6ImZjZjE4OTZjLTlkOWQtNGNiYS05MTgxLTgwMWFiYzU3Yzc0ZCIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvZHF0enlVaE5IVkFsclNkMzFGODJIcVZBQUEuIiwic3ViIjoiZmNmMTg5NmMtOWQ5ZC00Y2JhLTkxODEtODAxYWJjNTdjNzRkIiwidGlkIjoiMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExIiwidXRpIjoiaXB4SGZ6VnllMGlmRzFORDF2SUZBQSIsInZlciI6IjIuMCJ9.k0Xv1vdTsUtevDlEjiktY5ur_FeVPlKUUrehyt-q5eon6ij94-JCjtDbWnCQETLh7OlzDoWnQWGm8rHNgeSLUI2l1TYBx0Lup3QNK-99ttJT8xhO4bmZ_fUWPvzXkxi0lfhEheaCmouDYdpECuvtDsgyncUnjgqHAgbsC9boCih7DIJUC1V9mhetGj6OofxfQu4B1M6oYaPBo5WRbypU0bgSN06Tu6i3GXsRoDfbDgoQDldFrnnXJY6Jq9243QS4K8yvu6-X1wOqNcb6sQRdmf8sVwCSXGUd3LtWTq6lfXIxzEJqimKlm76-CXm4KZ18YAk3M4QzIb_D1zyuPTfwaQ",
		"", // this is the positive test, new fresh token is expected.
		1},

	jwtParcingTest{
		"NEG: sig valid, expired, 3 groups",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8wNDJkODA3ZC1hMThiLTQ5NjUtYTgyNC1lZmY3Mzg1NjA3ZTYiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yM2Q0MjUwZS0zNzExLTQ4ZTEtOGRmZS1kMjdmMjg1MTU0YTEvIiwiaWF0IjoxNjY1OTk5MzI2LCJuYmYiOjE2NjU5OTkzMjYsImV4cCI6MTY2NjAwMzIyNiwiYWlvIjoiRTJaZ1lLaStuWnA3NmQ0TDdRc0Y2Zzk1TGF3NUFBPT0iLCJhcHBpZCI6IjUzNTllNmEzLWRjMWUtNGFjMS04MDczLWQwZTY1OGEwMDJjNCIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyI0YzllMzhjZS1hZjY3LTRjMDgtYmRlZS1iZThmMDZiZmFjNmIiLCIyZTEyZDFiYi1jNDhlLTQyY2QtYjRjZC01NzMzODVlNGE5ZGMiLCJjNzExM2EzNi1kZTRkLTRmY2MtOWVhMC01MjM3MjcxMGQzY2QiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExLyIsIm9pZCI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvWDJBTFFTTG9XVkpxQ1R2OXpoV0ItYVZBQUEuIiwicm9sZXMiOlsiYXJnb25BZG1pblJvbGUxIiwidGVzdFJvbGUxIl0sInN1YiI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInRpZCI6IjIzZDQyNTBlLTM3MTEtNDhlMS04ZGZlLWQyN2YyODUxNTRhMSIsInV0aSI6Im1SNmhEdkZjWmt1YTdueGdvSkFsQUEiLCJ2ZXIiOiIxLjAifQ.rnPo5jm24js9BSGw6HODQ8V6GwVeWpsU0G9i6CFsyRcJeEPXGLiE5GnTgYpsl40AMIL_uxwRgr_IObt50uIzbdmzZ_9GO_XZLUF_6oH88-UD2M4HNZVkQL3oRluloiv41hFrUPHzTTCxJ0tUKO7YjEuPAeL_To9RQ-Cu_Jdfc5SPwR3KAN1K5numTXZ1szFbI2q0S7eDO9WmhV8XDxO-E9fFI2Bdr2fG8wGQYkJhsPny5of4rt2sREfB1RHDpEHOtDelAp2jfkbiAbP_y4NqDMI8K-7T5jp620Nqj-AUXaTgubTX-V24FWWOtwUkzM606UW-Fm2P_22JXig5Qq35vg",
		"token is expired", // this is the positive test, unless a fresh token is used.
		0},

	jwtParcingTest{
		"NEG: non existing kid, 1 group",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IlhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWCJ9.eyJhdWQiOiJhcGk6Ly8wNDJkODA3ZC1hMThiLTQ5NjUtYTgyNC1lZmY3Mzg1NjA3ZTYiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yM2Q0MjUwZS0zNzExLTQ4ZTEtOGRmZS1kMjdmMjg1MTU0YTEvIiwiaWF0IjoxNjYyOTg1ODA4LCJuYmYiOjE2NjI5ODU4MDgsImV4cCI6MTY2Mjk4OTcwOCwiYWlvIjoiRTJaZ1lPajlmU3lCTlNpeTRldEYyOHhma1RKdkFBPT0iLCJhcHBpZCI6IjUzNTllNmEzLWRjMWUtNGFjMS04MDczLWQwZTY1OGEwMDJjNCIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyIyZTEyZDFiYi1jNDhlLTQyY2QtYjRjZC01NzMzODVlNGE5ZGMiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExLyIsIm9pZCI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvWDJBTFFTTG9XVkpxQ1R2OXpoV0ItYVZBQUEuIiwicm9sZXMiOlsiYXJnb25BZG1pblJvbGUxIiwidGVzdFJvbGUxIl0sInN1YiI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInRpZCI6IjIzZDQyNTBlLTM3MTEtNDhlMS04ZGZlLWQyN2YyODUxNTRhMSIsInV0aSI6InU0X1ludC12SjAtVnk2Tk1kWFF4QUEiLCJ2ZXIiOiIxLjAifQ.ZfixXtPMrCEEUrVoW8rUQe-Wqx08nztZ1omqSRmQfWt8dimYndyJ5f4jUkAIfzKvyPtgvpXJo4dvWVpAeNUiPoLR3dcFjrMz9b_EkfXFI3NS0hkSqwFytazHa3v_o_V7TpIi5XBJRgfba5pYJlDeqnEPhEEScOD_jhSTjBDVJWp2j6iEsxmOJ5KKCzyG4FX0laJO16lcGcBsUzkVvIIH2n5FZXyrqMcL2Evgko6d64VAtx4wA5Kxanvs6igS3bIV7MUjpeP67aTcAafVCR20hgWT_IpZ6qaBidr68H6dzyeHTMYfeE-2NvO5o8mrNg65jndIDGA84zyFkxcaqh4ghQ",
		"no public key found for kid",
		0},

	jwtParcingTest{
		"NEG: token with missing kid, 1 group",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8wNDJkODA3ZC1hMThiLTQ5NjUtYTgyNC1lZmY3Mzg1NjA3ZTYiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yM2Q0MjUwZS0zNzExLTQ4ZTEtOGRmZS1kMjdmMjg1MTU0YTEvIiwiaWF0IjoxNjYyOTg1ODA4LCJuYmYiOjE2NjI5ODU4MDgsImV4cCI6MTY2Mjk4OTcwOCwiYWlvIjoiRTJaZ1lPajlmU3lCTlNpeTRldEYyOHhma1RKdkFBPT0iLCJhcHBpZCI6IjUzNTllNmEzLWRjMWUtNGFjMS04MDczLWQwZTY1OGEwMDJjNCIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyIyZTEyZDFiYi1jNDhlLTQyY2QtYjRjZC01NzMzODVlNGE5ZGMiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExLyIsIm9pZCI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvWDJBTFFTTG9XVkpxQ1R2OXpoV0ItYVZBQUEuIiwicm9sZXMiOlsiYXJnb25BZG1pblJvbGUxIiwidGVzdFJvbGUxIl0sInN1YiI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInRpZCI6IjIzZDQyNTBlLTM3MTEtNDhlMS04ZGZlLWQyN2YyODUxNTRhMSIsInV0aSI6InU0X1ludC12SjAtVnk2Tk1kWFF4QUEiLCJ2ZXIiOiIxLjAifQ.ZfixXtPMrCEEUrVoW8rUQe-Wqx08nztZ1omqSRmQfWt8dimYndyJ5f4jUkAIfzKvyPtgvpXJo4dvWVpAeNUiPoLR3dcFjrMz9b_EkfXFI3NS0hkSqwFytazHa3v_o_V7TpIi5XBJRgfba5pYJlDeqnEPhEEScOD_jhSTjBDVJWp2j6iEsxmOJ5KKCzyG4FX0laJO16lcGcBsUzkVvIIH2n5FZXyrqMcL2Evgko6d64VAtx4wA5Kxanvs6igS3bIV7MUjpeP67aTcAafVCR20hgWT_IpZ6qaBidr68H6dzyeHTMYfeE-2NvO5o8mrNg65jndIDGA84zyFkxcaqh4ghQ",
		"does not contain key id",
		0},

	jwtParcingTest{
		"NEG: non RSA256 alg, invalid sig, 1 group",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8wNDJkODA3ZC1hMThiLTQ5NjUtYTgyNC1lZmY3Mzg1NjA3ZTYiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yM2Q0MjUwZS0zNzExLTQ4ZTEtOGRmZS1kMjdmMjg1MTU0YTEvIiwiaWF0IjoxNjY1ODUyMzYxLCJuYmYiOjE2NjU4NTIzNjEsImV4cCI6MTY2NTg1NjI2MSwiYWlvIjoiRTJaZ1lJajc5dXFmdzNrMlZ4bGg4MzJMQlhZb0F3QT0iLCJhcHBpZCI6IjUzNTllNmEzLWRjMWUtNGFjMS04MDczLWQwZTY1OGEwMDJjNCIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyIyZTEyZDFiYi1jNDhlLTQyY2QtYjRjZC01NzMzODVlNGE5ZGMiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExLyIsIm9pZCI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvWDJBTFFTTG9XVkpxQ1R2OXpoV0ItYVZBQUEuIiwicm9sZXMiOlsiYXJnb25BZG1pblJvbGUxIiwidGVzdFJvbGUxIl0sInN1YiI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInRpZCI6IjIzZDQyNTBlLTM3MTEtNDhlMS04ZGZlLWQyN2YyODUxNTRhMSIsInV0aSI6InhSZ09ydFRZLWsydHE4M0JfTEVCQUEiLCJ2ZXIiOiIxLjAifQ.vlyvdWmVb1lnRzZg6vtAGOh9JSwWKK_6QE_bX19fmELbgL9WlmZOKpwNItqwLTS-JVuLG0qjFs7Atl1wUtXt6o5xrxOt5xOTB3YYw0ecJ6LbORd2cYqHM2vYln0mejq3soVmOjQNvaz9b17bewlw-A_UtMKLVK2WphC9KtLurazKqkS_wg3ZA3BWhFG9qZKLkbC-TSUKGboDfzZ8zcSXYjAioXkBnTqMcVngfHOcPX0VGfn9Stv9k5bonMwNQHcFNw1TND_JpaFVLMxpTn3p8JhRj_YplW70a5I2n-N5JUjW_2KVLQl122kGyxfHHSq0g55gvVSWNFfMg6U0ScLMUA",
		"unexpected signing method:",
		0},

	jwtParcingTest{
		"NEG: invalid signature",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8wNDJkODA3ZC1hMThiLTQ5NjUtYTgyNC1lZmY3Mzg1NjA3ZTYiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yM2Q0MjUwZS0zNzExLTQ4ZTEtOGRmZS1kMjdmMjg1MTU0YTEvIiwiaWF0IjoxNjY1OTk5MzI2LCJuYmYiOjE2NjU5OTkzMjYsImV4cCI6MTY2NjAwMzIyNiwiYWlvIjoiRTJaZ1lLaStuWnA3NmQ0TDdRc0Y2Zzk1TGF3NUFBPT0iLCJhcHBpZCI6IjUzNTllNmEzLWRjMWUtNGFjMS04MDczLWQwZTY1OGEwMDJjNCIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyI0YzllMzhjZS1hZjY3LTRjMDgtYmRlZS1iZThmMDZiZmFjNmIiLCIyZTEyZDFiYi1jNDhlLTQyY2QtYjRjZC01NzMzODVlNGE5ZGMiLCJjNzExM2EzNi1kZTRkLTRmY2MtOWVhMC01MjM3MjcxMGQzY2QiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMjNkNDI1MGUtMzcxMS00OGUxLThkZmUtZDI3ZjI4NTE1NGExLyIsIm9pZCI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInJoIjoiMC5BWUlBRGlYVUl4RTM0VWlOX3RKX0tGRlVvWDJBTFFTTG9XVkpxQ1R2OXpoV0ItYVZBQUEuIiwicm9sZXMiOlsiYXJnb25BZG1pblJvbGUxIiwidGVzdFJvbGUxIl0sInN1YiI6ImM2MDNhZmIwLWNjODUtNDYzMy1hYWM3LWI0YWJjODQzZjIwMyIsInRpZCI6IjIzZDQyNTBlLTM3MTEtNDhlMS04ZGZlLWQyN2YyODUxNTRhMSIsInV0aSI6Im1SNmhEdkZjWmt1YTdueGdvSkFsQUEiLCJ2ZXIiOiIxLjAifQ.XXXXXjm24js9BSGw6HODQ8V6GwVeWpsU0G9i6CFsyRcJeEPXGLiE5GnTgYpsl40AMIL_uxwRgr_IObt50uIzbdmzZ_9GO_XZLUF_6oH88-UD2M4HNZVkQL3oRluloiv41hFrUPHzTTCxJ0tUKO7YjEuPAeL_To9RQ-Cu_Jdfc5SPwR3KAN1K5numTXZ1szFbI2q0S7eDO9WmhV8XDxO-E9fFI2Bdr2fG8wGQYkJhsPny5of4rt2sREfB1RHDpEHOtDelAp2jfkbiAbP_y4NqDMI8K-7T5jp620Nqj-AUXaTgubTX-V24FWWOtwUkzM606UW-Fm2P_22JXig5Qq35vg",
		"crypto/rsa: verification error",
		0},

	jwtParcingTest{
		"NEG: token format error",
		"not_a.token.format.1232",
		"token format error",
		0},
}

// tests require a fresh JWK Cache.
func init() {
	jwk.InitJWKCache()
}

// DISCUSS (with Norbert) MS AD is not direclty required for this unit testing on /api/token
// why skip this test?
func prolog(t *testing.T) {
	ok := os.Getenv("MSAD")
	if ok == "" {
		t.Skip("MS AD not available, skip")
	}

	testconfig.Set(t)
}

func TestToken(t *testing.T) {
	prolog(t)

	for _, tokenCase := range jwtParcingTests {

		t.Run(tokenCase.testDesc, func(t *testing.T) {

			testToken, err := token.NewToken([]byte(tokenCase.tokenStr))
			var testResult bool

			if err != nil {
				if strings.Contains(fmt.Sprint(err), tokenCase.expectedErr) && tokenCase.gropuCount == len(testToken.Groups) {
					testResult = true
				} else {
					testResult = false
					t.Errorf("Error while parsing token: %s", err)
				}
			} else {
				if tokenCase.gropuCount == len(testToken.Groups) {
					testResult = true
				} else {
					testResult = false
				}
			}

			assert.Equal(t, true, testResult, tokenCase.testDesc)

		})
	}
}

func TestTokenTid(t *testing.T) {

	// must be a fresh valid token, and the tid it contains
	tstToken := "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8xNDEwNjFhNC03YTllLTQxNzgtOGUyNC1mM2NlMGQ4ODc4NjUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUvIiwiaWF0IjoxNjY3NDkyNzY5LCJuYmYiOjE2Njc0OTI3NjksImV4cCI6MTY2NzQ5NjY2OSwiYWlvIjoiRTJaZ1lPaitjeWV5dmU2THJlaTB2cVFsK3lZa0FBQT0iLCJhcHBpZCI6IjE0MTA2MWE0LTdhOWUtNDE3OC04ZTI0LWYzY2UwZDg4Nzg2NSIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyJkOTIwMTY2YS0yZjMwLTQ3ZGUtOGQ5ZS1iNWRlNTZlNjJjMDIiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1LyIsIm9pZCI6IjdmMzMzNGZlLTdjNjQtNGRmYS1iYjE1LWM1MTY1ZTkzZjlkOSIsInJoIjoiMC5BVXNBWmQwRU9JRXo2MEd3TnF5TVVibXJkYVJoRUJTZWVuaEJqaVR6emcySWVHVkxBQUEuIiwic3ViIjoiN2YzMzM0ZmUtN2M2NC00ZGZhLWJiMTUtYzUxNjVlOTNmOWQ5IiwidGlkIjoiMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1IiwidXRpIjoiTXgzWHlaZUtMVWlGR2Y5bVJvV1JBQSIsInZlciI6IjEuMCJ9.v6dPh-ik5NgVyo2wkl8ro7pBzqfILvX3qI4KMHEKgX0W5eC74RcQwXBVxyq7uSKNdcPcW4T1ktKjLJNqoRP7cEmoD9Nkk8vZeqqS9ez1_CzpmAsAYv4UzyvlZIiaEakv7mh3F9_uBYLEteHNaA4ErpxgCzaBLMIJcruEjGRyFF1j2N1gDFsAkttJiYsk_xWZKrpL3sToTW0wBvkE3xIlxmwJuFz1f8Ywru-iR-k8aMLA6yA1U6ugC3-Nr6m-9j3IhEsiXb94LE0BchSY-8TvH7RYNk_Bezlc0YrVaY2UAEaHxLDlFj8wgjkKw_8IsVMUKWLZ_u3zxhSSTCmBZwa2zQ"
	expectedTid := "3804dd65-3381-41eb-b036-ac8c51b9ab75"
	testToken, _ := token.NewToken([]byte(tstToken))
	testTid, _ := testToken.TenantId()

	assert.Equal(t, expectedTid, testTid)

}

func TestTokenGroup(t *testing.T) {
	// must be a fresh valid token, and the tid it contains
	tstToken := "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8xNDEwNjFhNC03YTllLTQxNzgtOGUyNC1mM2NlMGQ4ODc4NjUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUvIiwiaWF0IjoxNjY3NDkyNzY5LCJuYmYiOjE2Njc0OTI3NjksImV4cCI6MTY2NzQ5NjY2OSwiYWlvIjoiRTJaZ1lPaitjeWV5dmU2THJlaTB2cVFsK3lZa0FBQT0iLCJhcHBpZCI6IjE0MTA2MWE0LTdhOWUtNDE3OC04ZTI0LWYzY2UwZDg4Nzg2NSIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyJkOTIwMTY2YS0yZjMwLTQ3ZGUtOGQ5ZS1iNWRlNTZlNjJjMDIiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1LyIsIm9pZCI6IjdmMzMzNGZlLTdjNjQtNGRmYS1iYjE1LWM1MTY1ZTkzZjlkOSIsInJoIjoiMC5BVXNBWmQwRU9JRXo2MEd3TnF5TVVibXJkYVJoRUJTZWVuaEJqaVR6emcySWVHVkxBQUEuIiwic3ViIjoiN2YzMzM0ZmUtN2M2NC00ZGZhLWJiMTUtYzUxNjVlOTNmOWQ5IiwidGlkIjoiMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1IiwidXRpIjoiTXgzWHlaZUtMVWlGR2Y5bVJvV1JBQSIsInZlciI6IjEuMCJ9.v6dPh-ik5NgVyo2wkl8ro7pBzqfILvX3qI4KMHEKgX0W5eC74RcQwXBVxyq7uSKNdcPcW4T1ktKjLJNqoRP7cEmoD9Nkk8vZeqqS9ez1_CzpmAsAYv4UzyvlZIiaEakv7mh3F9_uBYLEteHNaA4ErpxgCzaBLMIJcruEjGRyFF1j2N1gDFsAkttJiYsk_xWZKrpL3sToTW0wBvkE3xIlxmwJuFz1f8Ywru-iR-k8aMLA6yA1U6ugC3-Nr6m-9j3IhEsiXb94LE0BchSY-8TvH7RYNk_Bezlc0YrVaY2UAEaHxLDlFj8wgjkKw_8IsVMUKWLZ_u3zxhSSTCmBZwa2zQ"
	expectedGroup := "d920166a-2f30-47de-8d9e-b5de56e62c02"
	testToken, _ := token.NewToken([]byte(tstToken))
	testGroup, _ := testToken.AdminGroups()

	assert.Equal(t, expectedGroup, testGroup[0])
}

func TestTokenOid(t *testing.T) {
	// must be a fresh valid token
	tstToken := "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJhcGk6Ly8xNDEwNjFhNC03YTllLTQxNzgtOGUyNC1mM2NlMGQ4ODc4NjUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUvIiwiaWF0IjoxNjY3NDkyNzY5LCJuYmYiOjE2Njc0OTI3NjksImV4cCI6MTY2NzQ5NjY2OSwiYWlvIjoiRTJaZ1lPaitjeWV5dmU2THJlaTB2cVFsK3lZa0FBQT0iLCJhcHBpZCI6IjE0MTA2MWE0LTdhOWUtNDE3OC04ZTI0LWYzY2UwZDg4Nzg2NSIsImFwcGlkYWNyIjoiMSIsImdyb3VwcyI6WyJkOTIwMTY2YS0yZjMwLTQ3ZGUtOGQ5ZS1iNWRlNTZlNjJjMDIiXSwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1LyIsIm9pZCI6IjdmMzMzNGZlLTdjNjQtNGRmYS1iYjE1LWM1MTY1ZTkzZjlkOSIsInJoIjoiMC5BVXNBWmQwRU9JRXo2MEd3TnF5TVVibXJkYVJoRUJTZWVuaEJqaVR6emcySWVHVkxBQUEuIiwic3ViIjoiN2YzMzM0ZmUtN2M2NC00ZGZhLWJiMTUtYzUxNjVlOTNmOWQ5IiwidGlkIjoiMzgwNGRkNjUtMzM4MS00MWViLWIwMzYtYWM4YzUxYjlhYjc1IiwidXRpIjoiTXgzWHlaZUtMVWlGR2Y5bVJvV1JBQSIsInZlciI6IjEuMCJ9.v6dPh-ik5NgVyo2wkl8ro7pBzqfILvX3qI4KMHEKgX0W5eC74RcQwXBVxyq7uSKNdcPcW4T1ktKjLJNqoRP7cEmoD9Nkk8vZeqqS9ez1_CzpmAsAYv4UzyvlZIiaEakv7mh3F9_uBYLEteHNaA4ErpxgCzaBLMIJcruEjGRyFF1j2N1gDFsAkttJiYsk_xWZKrpL3sToTW0wBvkE3xIlxmwJuFz1f8Ywru-iR-k8aMLA6yA1U6ugC3-Nr6m-9j3IhEsiXb94LE0BchSY-8TvH7RYNk_Bezlc0YrVaY2UAEaHxLDlFj8wgjkKw_8IsVMUKWLZ_u3zxhSSTCmBZwa2zQ"
	expectedOid := "7f3334fe-7c64-4dfa-bb15-c5165e93f9d9"
	testToken, _ := token.NewToken([]byte(tstToken))
	testObjectId, _ := testToken.ObjectId()
	assert.Equal(t, expectedOid, testObjectId)
}

func TestTokenIsApp(t *testing.T) {
	// must be a fresh valid token
	tstToken := "eyJ0eXAiOiJKV1QiLCJub25jZSI6InZaTDFDMkNlYnotbVhNVjBBdlN1MElrVjVyOTUwU3JLUDg0bVE4SUJockEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiJodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20iLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUvIiwiaWF0IjoxNjY3NDk0OTQ5LCJuYmYiOjE2Njc0OTQ5NDksImV4cCI6MTY2NzQ5ODg0OSwiYWlvIjoiRTJaZ1lQaHFwSGt5dXNEOHZVdkZncDhGc3ozekFBPT0iLCJhcHBfZGlzcGxheW5hbWUiOiJ0ZXN0QXBwX2dtIiwiYXBwaWQiOiI3MjMzYjEwZC05ODJmLTRjY2YtYTA2ZC1mMTQ4MTE2NDlhYzUiLCJhcHBpZGFjciI6IjEiLCJpZHAiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUvIiwiaWR0eXAiOiJhcHAiLCJvaWQiOiIzOWZjYTUwOC1jY2U0LTQ2NjYtYjQ5ZS02OGY0OTk3NjI0ZGUiLCJyaCI6IjAuQVVzQVpkMEVPSUV6NjBHd05xeU1VYm1yZFFNQUFBQUFBQUFBd0FBQUFBQUFBQUJMQUFBLiIsInJvbGVzIjpbIkdyb3VwLlJlYWQuQWxsIiwiRGlyZWN0b3J5LlJlYWQuQWxsIiwiVXNlci5SZWFkLkFsbCJdLCJzdWIiOiIzOWZjYTUwOC1jY2U0LTQ2NjYtYjQ5ZS02OGY0OTk3NjI0ZGUiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiIzODA0ZGQ2NS0zMzgxLTQxZWItYjAzNi1hYzhjNTFiOWFiNzUiLCJ1dGkiOiJudmxsblExUEMwT0c5Sy1HMkJUVUFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyIwOTk3YTFkMC0wZDFkLTRhY2ItYjQwOC1kNWNhNzMxMjFlOTAiXSwieG1zX3RjZHQiOjE2NjU1MDU0MDIsInhtc190ZGJyIjoiRVUifQ.Q1jWlJ8po0J6dkDRmwMvEvVRJqtoW6mD2N8ViPSOjVBGw0z0Is53Vu5S7pfnRx4rZt70k9CAhZ_3yakeIDUq4JSoG5IK6R7DSFJtY-IurQCyz8UbSNF_RNjA43ApRJNw9LKU8C0ICflt9x5oWsYjk3OjXuvB_j1hMKRp9L30jxSaYvjh-Sor8Zb9ra7xJ4RaoWayjYpBkxzHlfzWxbQjy8z-9R_c4qTE-m8654yXNrx7DyORVtinDBz_iixdSzaCJvbHQuhVWRSkNLw4gPEt4loRvb7sTCacEqFBe74Dm-U7rPbJlWw2MFby-yq1QEhwUt3uhuiSwaMr0e-nL2IJpQ"
	testToken, _ := token.NewToken([]byte(tstToken))
	isAppType, _ := testToken.IsApp()
	assert.Equal(t, true, isAppType)
}
